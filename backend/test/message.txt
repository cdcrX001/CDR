```from cryptography.hazmat.primitives.asymmetric import padding
from cryptography import x509
from cryptography.hazmat.primitives import hashes

# Store CA certificate as a string
CA_CERT_PEM = """-----BEGIN CERTIFICATE-----
MIIDPzCCAiegAwIBAgIUIJr5ezU7lSforzlljCKl50eTAfcwDQYJKoZIhvcNAQEL
BQAwLzEtMCsGA1UEAwwkMTNjYWJiNDQtZmNmYi00YWNkLThhNzctMGJkODAyOTdk
MzI5MB4XDTI1MDIyMjIxMjgwN1oXDTM1MDIyMDIxMjgwN1owLzEtMCsGA1UEAwwk
MTNjYWJiNDQtZmNmYi00YWNkLThhNzctMGJkODAyOTdkMzI5MIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw0Sc+rxq/ta9UkCsrWl/OYuiL109dyKf5O23
DRlEKwN9MowiBnehOVb9YWVZtwIAs/GJ4He0Yv7P/EQZPhdAV6gSaOqBRWOysYIw
1+m8+JV+iUVxr37kH4WH69LMl4nHQvJ5QS2ol4GdSiyzQjrV24dGA/+7VAMxEeW4
2s0iTr8XHleVse/8A/EHeq9xHjlQV4xVz2mvkKO0J2KYzQ6rvzNACiAUHQKn6q5T
Uv5IZ94I+/SBKzbi5ljUH6jE87Vl+kqvekPemJhXxUyVMHxUt7fuIV+gfGw8t91W
B7ks20ZGlJ0Nm08aCfYhSec8hC4GgfhjUo88vZx1QjFCh+yOSwIDAQABo1MwUTAd
BgNVHQ4EFgQUdRlbO5IgaOxySNmUA6RDf8j/Fp0wHwYDVR0jBBgwFoAUdRlbO5Ig
aOxySNmUA6RDf8j/Fp0wDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
AQEAoC7P/BdBlJ7Tbs8lHjM9PtvHAh+ceZtlaVYdNnL+FCUSccifT9J+rc1drwAb
u8LrJ6pKLvOSYrU14XXHZPJ7HTBsrPCHhujFfVFYW4Rzu7DlmSZsyusp/phlr/fr
/KMo0i39kb1g/gd2vHBJheq3mp/OgDRSa3HjQFt480V8FSurTIq21/lkoC1yYDc8
hVUXDPMAAbcjUuSlAqNo7tlfucH2q5sNgGLCenyrJJwvOMMu2Iw7aOjijqYDHmtU
+htpHSMxGCi8WG7E58dG2GAQDW0hYpwOSZ4FNuz8r1VFNGiduOqZ1EarJm7dbaux
AFjPiRWGsJ6s73kAkahAOpFxkA==
-----END CERTIFICATE-----"""

def verify_certificate(cert_pem):
    """Verify user certificate using CA certificate stored in code."""
    try:
        # Load the CA certificate from the string
        ca_cert = x509.load_pem_x509_certificate(CA_CERT_PEM.encode())

        # Load the user certificate from the given PEM string
        user_cert = x509.load_pem_x509_certificate(cert_pem.encode())

        # Check if the issuer of user_cert matches the CA subject
        if user_cert.issuer != ca_cert.subject:
            raise ValueError("Certificate is not issued by this CA")

        # Verify the certificate signature using CA public key
        ca_cert.public_key().verify(
            user_cert.signature,
            user_cert.tbs_certificate_bytes,
            padding.PKCS1v15(),
            hashes.SHA256()
        )

        print("✅ Certificate is valid and signed by CA")
        return user_cert.public_key()

    except Exception as e:
        print(f"❌ Certificate verification failed: {e}")
        return None
```








